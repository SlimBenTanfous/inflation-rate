"0","renderPlot({"
"0","  "
"0","x1 <- bbox(fdc)[1]"
"0","y1 <- bbox(fdc)[2]"
"0","x2 <- bbox(fdc)[3]"
"0","y2 <- bbox(fdc)[4]"
"0","M <- (x2 - x1) * (y2 - y1)"
"0","sc <- sum(pt$var, na.rm = TRUE)"
"0","k <- 0.2  "
"0","pt$size <- sqrt((pt$var * k * M/sc)/pi)"
"0","plot(fdc, border = ""white"", col = ""grey"")"
"0","symbols(pt[, c(""x"", ""y"")], circles = pt$size, add = TRUE, bg = ""red"", inches = FALSE)"
"0","LegTitle <- ""Popuplation"""
"0","rLeg <- quantile(pt$size, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rLeg"
"0","rVal <- quantile(pt$var, c(1, 0.9, 0.25, 0), type = 1, na.rm = TRUE);rVal"
"0","l <- data.frame(x = x1, y = y1)"
"0","head(l)"
"0","xinit <- l$x + rLeg[1]"
"0","xinit"
"0","ypos <- l$y + rLeg"
"0","ypos"
"0","symbols(x = rep(xinit, 4), y = ypos, circles = rLeg,add = TRUE, bg = ""red"", inches = FALSE)"
"0","text(x = rep(xinit, 4) + rLeg[1] * 1.2, y = (l$y + (2 * rLeg)), rVal, cex = 0.3, srt = 0, adj = 0)"
"0","for (i in 1:4) {"
"0","  segments(xinit, (l$y + (2 * rLeg[i])), xinit + rLeg[1] * 1.1, (l$y + (2 * +rLeg[i]))) }"
"0","text(x = xinit - rLeg[1], y = (l$y + (2 * rLeg[1])), LegTitle, adj = c(0, 0), cex = 0.7)"
"0","title(main = ""Population, 2010"",  cex.sub = 0.7)"
"0","xscale <- x2"
"0","yscale <- y1"
"0","sizescale <- 50000"
"0","labelscale <- ""50km"""
"0","SpatialPolygonsRescale(layout.scale.bar(), offset = c(xscale, yscale), scale = sizescale, fill = c(""black""), plot.grid = F)"
"0","text(xscale + sizescale/2, yscale, paste(labelscale, ""\n\n"", sep = """"), cex = 0.7)"
"0","xarrow <- x1"
"0","yarrow <- y2 - (y2 - y1)/10"
"0","SpatialPolygonsRescale(layout.north.arrow(2), offset = c(xarrow, yarrow), scale = 50000, plot.grid = F)"
"0","})"
"1","function (...) 
"
"1","{
"
"1","    if (length(outputArgs) != 0 && !hasExecuted$get()) {
"
"1","        warning(""Unused argument: outputArgs. The argument outputArgs is only "", 
"
"1","            ""meant to be used when embedding snippets of Shiny code in an "", 
"
"1","            ""R Markdown code chunk (using runtime: shiny). When running a "", 
"
"1","            ""full Shiny app, please set the output arguments directly in "", 
"
"1","            ""the corresponding output function of your UI code."")
"
"1","        hasExecuted$set(TRUE)
"
"1","    }
"
"1","    if (is.null(formals(origRenderFunc))) 
"
"1","        origRenderFunc()
"
"1","    else origRenderFunc(...)
"
"1","}
"
"1","<environment: 0x000000001fac4128>
"
"1","attr(,""class"")"
"1","
"
"1","[1]"
"1"," ""shiny.render.function"""
"1"," ""function""             "
"1","
"
"1","attr(,""outputFunc"")"
"1","
"
"1","function (outputId, width = ""100%"", height = ""400px"", click = NULL, 
"
"1","    dblclick = NULL, hover = NULL, hoverDelay = NULL, hoverDelayType = NULL, 
"
"1","    brush = NULL, clickId = NULL, hoverId = NULL, inline = FALSE) 
"
"1","{
"
"1","    res <- imageOutput(outputId, width, height, click, dblclick, 
"
"1","        hover, hoverDelay, hoverDelayType, brush, clickId, hoverId, 
"
"1","        inline)
"
"1","    res$attribs$class <- ""shiny-plot-output""
"
"1","    res
"
"1","}
"
"1","<environment: namespace:shiny>
"
"1","attr(,""outputArgs"")"
"1","
"
"1","list()
"
"1","attr(,""hasExecuted"")"
"1","
"
"1","<Mutable>
  Public:
    clone: function (deep = FALSE) 
    get: function () 
    set: function (value) 
  Private:
    value: FALSE"
"1","
"
